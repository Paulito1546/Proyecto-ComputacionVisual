* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  overflow: hidden;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

canvas {
  display: block;
}
import { Canvas } from '@react-three/fiber'
import { useState, useCallback } from 'react'
import { useControls } from 'leva'
import Scene from './components/Scene'
import useVoiceAndEEG from './hooks/useVoiceAndEEG'
import HandTracker from './components/HandTracker'
import './App.css'

/**
 * 🌿 Synesthetic Garden — Application principale
 * Intègre :
 *  - Contrôles Leva (jour/nuit, caméra)
 *  - Reconnaissance vocale (Web Speech API)
 *  - Détection de gestes (MediaPipe)
 *  - Simulation EEG (valeurs colorimétriques)
 *  - Statut caméra visible en direct
 */
function App() {
  // 🎛️ Contrôles globaux (jour/nuit, caméra, profondeur)
  const { timeOfDay, cameraType, showDepth } = useControls('Global Controls', {
    timeOfDay: { value: 'day', options: ['day', 'night'], label: 'Time of Day' },
    cameraType: { value: 'perspective', options: ['perspective', 'orthographic'], label: 'Camera Type' },
    showDepth: { value: false, label: 'Show Depth Visualization' }
  })

  // 📷 État caméra (waiting | starting | ready | error)
  const [cameraStatus, setCameraStatus] = useState('waiting')

  // 🧠 Hook personnalisé : voix + EEG simulé
  const { command, setCommand, eegValue } = useVoiceAndEEG()

  // ✋ Geste détecté via MediaPipe
  const [gesture, setGesture] = useState(null)
  const handleGesture = useCallback(
    (g) => {
      setGesture(g)
      // On mappe les gestes vers des commandes vocales équivalentes
      if (g === 'open') setCommand('flor')
      else if (g === 'fist') setCommand('noche')
    },
    [setCommand]
  )

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      {/* 🔹 Détection de gestes (webcam) */}
      <HandTracker onGesture={handleGesture} onCameraStatusChange={setCameraStatus} />

      {/* 🔹 Scène 3D principale */}
      <Canvas camera={{ position: [0, 5, 15], fov: 60 }} shadows>
        <Scene
          timeOfDay={timeOfDay}
          cameraType={cameraType}
          showDepth={showDepth}
          command={command}
          eegValue={eegValue}
        />
      </Canvas>

      {/* 🔹 Interface utilisateur (overlay) */}
      <div
        style={{
          position: 'absolute',
          top: '20px',
          left: '20px',
          color: 'white',
          fontFamily: 'monospace',
          textShadow: '1px 1px 2px black'
        }}
      >
        <h2>🌿 Synesthetic Garden</h2>
        <p>🗓️ Time: {timeOfDay === 'day' ? '☀️ Day' : '🌙 Night'}</p>
        <p>🎥 Camera: {cameraType === 'perspective' ? '📷 Perspective' : '📐 Orthographic'}</p>
        <p>🗣️ Commande: {command || '—'}</p>
        <p>✋ Geste: {gesture || '—'}</p>
        <p>🧠 EEG: {eegValue.toFixed(2)}</p>
        <p>
          📷 Caméra:{' '}
          {cameraStatus === 'ready'
            ? '✅ Détectée'
            : cameraStatus === 'starting'
            ? '⌛ Initialisation...'
            : cameraStatus === 'error'
            ? '❌ Erreur'
            : '🚫 En attente...'}
        </p>
        {showDepth && <p>🎨 Depth Mode Active</p>}
      </div>
    </div>
  )
}

export default App
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
